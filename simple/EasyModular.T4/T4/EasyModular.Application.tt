<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data"#>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #> 
<#@ import namespace="Newtonsoft.Json" #> 
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Reflection" #> 
<#@ import namespace="MySql.Data.MySqlClient" #>

<#@ assembly name="$(ProjectDir)\_Library\MySql.Data.dll" #>
<#@ assembly name="$(ProjectDir)\_Library\Newtonsoft.Json.dll" #>

<#@ include file="$(ProjectDir)/Model/ConfigModel.ttinclude"#> 
<#@ include file="$(ProjectDir)/Helper/OutputHelper.ttinclude"#> 
<#@ include file="$(ProjectDir)/Helper/MySqlDbHelper.ttinclude"#> 

<# var manager = new Manager(Host, GenerationEnvironment, true); #> 

<# 
    //***********************直接ctrl+s即可以运行**************************

    var solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)"); //当解决方案目录
    var projectDir = Host.ResolveAssemblyReference("$(ProjectDir)"); //当前项目目录

    var configUrl = Path.Combine(projectDir, "config.json");
    using var streamReader = new StreamReader(configUrl);
    var config = JsonConvert.DeserializeObject<ConfigModel>(streamReader.ReadToEnd());

    var projectName=$"{config.Module}.Application";
    var projectPath=Path.Combine(solutionDir,config.ProjectPath,projectName);
    if (!Directory.Exists(projectPath))  
    {  
        Directory.CreateDirectory(projectPath);  
    } 
  
    var _db =new MySqlDbHelper(projectDir);

    var tables=_db.GetDbTables(config.Prefix,config.TableName);

    foreach(var table in tables)
    {
       var tableName = table.table_name.Substring(config.Prefix.Length - 1).Replace("_", "");;

       var applicationDir=Path.Combine(projectPath,tableName); 
       if(!Directory.Exists(applicationDir))
       {
          Directory.CreateDirectory(applicationDir); 
       }

//===========================1.生成模型===========================================

       var modelDir=Path.Combine(applicationDir,"Models"); 
       if(!Directory.Exists(modelDir))
       {
          Directory.CreateDirectory(modelDir); 
       }
//=====1.1.生成mapper
       manager.StartBlock("_MapperConfig.cs",modelDir);
       #>
using AutoMapper;
using EasyModular.AutoMapper;
using <#=config.Module#>.Domain;
using System;
using System.Collections.Generic;
using System.Text;

namespace <#=projectName#>.<#=tableName#>Service
{
    public class MapperConfig : IMapperConfig
    {
        public void Bind(IMapperConfigurationExpression cfg)
        {
            cfg.CreateMap<<#=tableName#>AddModel,<#=tableName#>Entity>();
            cfg.CreateMap<<#=tableName#>Entity, <#=tableName#>UpdateModel>();
        }
    }
}
<# 
     manager.EndBlock();
//====1.2.生成新增模型
     manager.StartBlock(tableName+"AddModel.cs",modelDir);
     var columns=_db.GetDbColumns(table.table_name);
    #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace <#=projectName#>
{
    /// <summary>
    /// <#=table.table_comment.Replace("表","")#>新增模型
    /// </summary>
    public class <#=tableName#>AddModel
    {
        <#
         foreach(var col in columns)
         {
           if (config.ExcludeCols.Split(',').Any(m=>m==col.column_name))
             continue;
            var colType=_db.ConvertToCsharpType(col.data_type,col.is_nullable,col.character_maximum_length);
         #>

        /// <summary>
        /// <#=col.column_comment#>
        /// </summary>
        public <#=colType#> <#=col.column_name#>  { get; set; }
    <#}#>}
}
<#
 manager.EndBlock(); 

//====1.3.生成更新模型
     manager.StartBlock(tableName+"UpdateModel.cs",modelDir);
     #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace <#=projectName#>
{
    /// <summary>
    /// <#=table.table_comment.Replace("表","")#>更新模型
    /// </summary>
    public class <#=tableName#>UpdateModel : <#=tableName#>AddModel
    {
        [Required(ErrorMessage = "请选择<#=table.table_comment.Replace("表","")#>")]
        public string Id { get; set; }
    }
}
<#
    manager.EndBlock();

//===========================2.生成服务接口===========================================
   manager.StartBlock("I"+tableName+"Service.cs",applicationDir);
   #> 
using EasyModular.Utils;
using <#=config.Module#>.Domain;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace <#=projectName#>.<#=tableName#>Service
{
    /// <summary>
    /// <#=table.table_comment.Replace("表","")#>服务
    /// </summary>
    public interface I<#=tableName#>Service
    {
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        Task<IResultModel> Query(<#=tableName#>QueryModel model);

        /// <summary>
        /// 新增
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        Task<IResultModel> Add(<#=tableName#>AddModel model);

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        Task<IResultModel> Delete(string id);

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        Task<IResultModel> Edit(string id);

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        Task<IResultModel> Update(<#=tableName#>UpdateModel model);

    }
}
<#
    manager.EndBlock();
//===========================2.生成服务实现类===========================================
   manager.StartBlock(tableName+"Service.cs",applicationDir);
   #> 
using AutoMapper;
using EasyModular.Utils;
using <#=config.Module#>.Domain;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace <#=projectName#>.<#=tableName#>Service
{
    public class <#=tableName#>Service : I<#=tableName#>Service
    {
        private readonly IMapper _mapper;
        private readonly I<#=tableName#>Repository _repository;
        public <#=tableName#>Service(IMapper mapper, I<#=tableName#>Repository repository)
        {
            _mapper = mapper;
            _repository = repository;
        }

        public async Task<IResultModel> Query(<#=tableName#>QueryModel model)
        {
            var result = new QueryResultModel<<#=tableName#>Entity>
            {
                Rows = await _repository.Query(model),
                Total = model.TotalCount
            };

            return ResultModel.Success(result);
        }

        public async Task<IResultModel> Add(<#=tableName#>AddModel model)
        {
            var entity = _mapper.Map<<#=tableName#>Entity>(model);
            var result = await _repository.InsertAsync(entity);

            return ResultModel.Result(result);
        }

        public async Task<IResultModel> Delete(string id)
        {
            var entity = await _repository.FirstAsync(id);
            if (entity == null)
                return ResultModel.NotExists;

            var result = await _repository.SoftDeleteAsync(entity);

            return ResultModel.Result(result);
        }

        public async Task<IResultModel> Edit(string id)
        {
            var entity = await _repository.FirstAsync(id);
            if (entity == null)
                return ResultModel.NotExists;

            var model = _mapper.Map<<#=tableName#>UpdateModel>(entity);
            return ResultModel.Success(model);
        }

        public async Task<IResultModel> Update(<#=tableName#>UpdateModel model)
        {
            var entity = await _repository.FirstAsync(model.Id);
            if (entity == null)
                return ResultModel.NotExists;

            _mapper.Map(model, entity);

            var result = await _repository.UpdateAsync(entity);

            return ResultModel.Result(result);
        }

    }
}
<#
manager.EndBlock();
}
manager.Process(true);  
#>  
